import tkinter as tk
from tkinter import messagebox
import math

# تغییر تم به تاریک
BG_COLOR = "#2E2E2E"
FG_COLOR = "#FFFFFF"
BTN_COLOR = "#444444"
BTN_HOVER = "#555555"

def calculate_log():
    try:
        num = float(entry_log.get())
        base = float(entry_base.get()) if entry_base.get() else 10
        result = math.log(num, base)
        label_log_result.config(text=f"log({num}, {base}) = {result:.4f}")
    except ValueError:
        messagebox.showerror("Error", "Enter a valid number!")

def calculate_trig(func):
    try:
        angle = float(entry_angle.get())
        if func == "sin":
            result = math.sin(math.radians(angle))
        elif func == "cos":
            result = math.cos(math.radians(angle))
        elif func == "tan":
            result = math.tan(math.radians(angle))
        label_trig_result.config(text=f"{func}({angle}°) = {result:.4f}")
    except ValueError:
        messagebox.showerror("Error", "Enter a valid angle!")

# رابط کاربری
root = tk.Tk()
root.title("Advanced Calculator")
root.configure(bg=BG_COLOR)

# لگاریتم
tk.Label(root, text="Logarithm:", bg=BG_COLOR, fg=FG_COLOR).grid(row=0, column=0)
entry_log = tk.Entry(root, bg=BTN_COLOR, fg=FG_COLOR)
entry_log.grid(row=0, column=1)
tk.Label(root, text="Base:", bg=BG_COLOR, fg=FG_COLOR).grid(row=0, column=2)
entry_base = tk.Entry(root, bg=BTN_COLOR, fg=FG_COLOR)
entry_base.grid(row=0, column=3)
log_button = tk.Button(root, text="Calculate Log", command=calculate_log, bg=BTN_COLOR, fg=FG_COLOR)
log_button.grid(row=0, column=4)
label_log_result = tk.Label(root, text="", bg=BG_COLOR, fg=FG_COLOR)
label_log_result.grid(row=1, column=0, columnspan=5)

# توابع مثلثاتی
tk.Label(root, text="Angle (°):", bg=BG_COLOR, fg=FG_COLOR).grid(row=2, column=0)
entry_angle = tk.Entry(root, bg=BTN_COLOR, fg=FG_COLOR)
entry_angle.grid(row=2, column=1)
sin_button = tk.Button(root, text="sin", command=lambda: calculate_trig("sin"), bg=BTN_COLOR, fg=FG_COLOR)
sin_button.grid(row=2, column=2)
cos_button = tk.Button(root, text="cos", command=lambda: calculate_trig("cos"), bg=BTN_COLOR, fg=FG_COLOR)
cos_button.grid(row=2, column=3)
tan_button = tk.Button(root, text="tan", command=lambda: calculate_trig("tan"), bg=BTN_COLOR, fg=FG_COLOR)
tan_button.grid(row=2, column=4)
label_trig_result = tk.Label(root, text="", bg=BG_COLOR, fg=FG_COLOR)
label_trig_result.grid(row=3, column=0, columnspan=5)

root.mainloop()
import math
import cmath

def factorial(n):
    return math.factorial(n) if n >= 0 and n == int(n) else "Invalid input"

def complex_add(a, b):
    return a + b

def complex_multiply(a, b):
    return a * b

# تست
print("Factorial(5):", factorial(5))

z1 = complex(2, 3)
z2 = complex(1, -4)
print(f"Complex Add: {z1} + {z2} = {complex_add(z1, z2)}")
print(f"Complex Multiply: {z1} * {z2} = {complex_multiply(z1, z2)}")
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def exponentiation(base, exp):
    return base ** exp

# تست
print("Is 17 prime?", is_prime(17))
print("Is 20 prime?", is_prime(20))

print("2^5 =", exponentiation(2, 5))
print("3^4 =", exponentiation(3, 4))

import math

def square_root(n):
    return math.sqrt(n) if n >= 0 else "Invalid input"

def natural_log(n):
    return math.log(n) if n > 0 else "Invalid input"

# تست
print("Square root of 25:", square_root(25))
print("Square root of -4:", square_root(-4))
print("Natural log of 10:", natural_log(10))
print("Natural log of -5:", natural_log(-5))
import numpy as np
import matplotlib.pyplot as plt

def plot_function(func, x_range=(-10, 10), num_points=100):
    x = np.linspace(x_range[0], x_range[1], num_points)
    y = [func(val) for val in x]
    
    plt.plot(x, y, label=f"{func.__name__}(x)")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.title(f"Plot of {func.__name__}(x)")
    plt.legend()
    plt.grid(True)
    plt.show()

# تست
plot_function(np.sin)
plot_function(np.cos)
plot_function(np.exp)
import tkinter as tk

def calculate():
    try:
        result = eval(entry.get())
        label_result.config(text=f"Result: {result}")
    except Exception as e:
        label_result.config(text="Error")

# رابط گرافیکی
root = tk.Tk()
root.title("Simple Calculator")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        label_result.config(text=f"Result: {result}")
        history.append(f"{expression} = {result}")
        update_history()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])  # نمایش ۵ محاسبه اخیر
    label_history.config(text=f"History:\n{history_text}")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with History")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        history.append(f"{expression} = {result}")
        update_history()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Percentage")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        history.append(f"{expression} = {result}")
        update_history()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Percentage")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        history.append(f"{expression} = {result}")
        update_history()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Percentage")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        history.append(f"{expression} = {result}")
        update_history()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

def clear():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Clear")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear", command=clear)
btn_clear.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()
#toda not code
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

def save_to_file(record):
    with open("calculation_history.txt", "a") as file:
        file.write(record + "\n")

def clear():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with History Save")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear", command=clear)
btn_clear.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

def save_to_file(record):
    with open("calculation_history.txt", "a") as file:
        file.write(record + "\n")

def load_history():
    try:
        with open("calculation_history.txt", "r") as file:
            lines = file.readlines()
            history.extend(line.strip() for line in lines[-5:])
            update_history()
    except FileNotFoundError:
        pass

def clear():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with History Load")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear", command=clear)
btn_clear.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

load_history()
root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

def save_to_file(record):
    with open("calculation_history.txt", "a") as file:
        file.write(record + "\n")

def load_history():
    try:
        with open("calculation_history.txt", "r") as file:
            lines = file.readlines()
            history.extend(line.strip() for line in lines[-5:])
            update_history()
    except FileNotFoundError:
        pass

def undo_last():
    if history:
        history.pop()
        update_history()
        with open("calculation_history.txt", "w") as file:
            file.write("\n".join(history) + "\n")

def clear():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Undo")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear", command=clear)
btn_clear.pack(pady=5)

btn_undo = tk.Button(root, text="Undo", command=undo_last)
btn_undo.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

load_history()
root.mainloop()
