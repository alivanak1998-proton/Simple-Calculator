import tkinter as tk
from tkinter import messagebox
import math

# تغییر تم به تاریک
BG_COLOR = "#2E2E2E"
FG_COLOR = "#FFFFFF"
BTN_COLOR = "#444444"
BTN_HOVER = "#555555"

def calculate_log():
    try:
        num = float(entry_log.get())
        base = float(entry_base.get()) if entry_base.get() else 10
        result = math.log(num, base)
        label_log_result.config(text=f"log({num}, {base}) = {result:.4f}")
    except ValueError:
        messagebox.showerror("Error", "Enter a valid number!")

def calculate_trig(func):
    try:
        angle = float(entry_angle.get())
        if func == "sin":
            result = math.sin(math.radians(angle))
        elif func == "cos":
            result = math.cos(math.radians(angle))
        elif func == "tan":
            result = math.tan(math.radians(angle))
        label_trig_result.config(text=f"{func}({angle}°) = {result:.4f}")
    except ValueError:
        messagebox.showerror("Error", "Enter a valid angle!")

# رابط کاربری
root = tk.Tk()
root.title("Advanced Calculator")
root.configure(bg=BG_COLOR)

# لگاریتم
tk.Label(root, text="Logarithm:", bg=BG_COLOR, fg=FG_COLOR).grid(row=0, column=0)
entry_log = tk.Entry(root, bg=BTN_COLOR, fg=FG_COLOR)
entry_log.grid(row=0, column=1)
tk.Label(root, text="Base:", bg=BG_COLOR, fg=FG_COLOR).grid(row=0, column=2)
entry_base = tk.Entry(root, bg=BTN_COLOR, fg=FG_COLOR)
entry_base.grid(row=0, column=3)
log_button = tk.Button(root, text="Calculate Log", command=calculate_log, bg=BTN_COLOR, fg=FG_COLOR)
log_button.grid(row=0, column=4)
label_log_result = tk.Label(root, text="", bg=BG_COLOR, fg=FG_COLOR)
label_log_result.grid(row=1, column=0, columnspan=5)

# توابع مثلثاتی
tk.Label(root, text="Angle (°):", bg=BG_COLOR, fg=FG_COLOR).grid(row=2, column=0)
entry_angle = tk.Entry(root, bg=BTN_COLOR, fg=FG_COLOR)
entry_angle.grid(row=2, column=1)
sin_button = tk.Button(root, text="sin", command=lambda: calculate_trig("sin"), bg=BTN_COLOR, fg=FG_COLOR)
sin_button.grid(row=2, column=2)
cos_button = tk.Button(root, text="cos", command=lambda: calculate_trig("cos"), bg=BTN_COLOR, fg=FG_COLOR)
cos_button.grid(row=2, column=3)
tan_button = tk.Button(root, text="tan", command=lambda: calculate_trig("tan"), bg=BTN_COLOR, fg=FG_COLOR)
tan_button.grid(row=2, column=4)
label_trig_result = tk.Label(root, text="", bg=BG_COLOR, fg=FG_COLOR)
label_trig_result.grid(row=3, column=0, columnspan=5)

root.mainloop()
import math
import cmath

def factorial(n):
    return math.factorial(n) if n >= 0 and n == int(n) else "Invalid input"

def complex_add(a, b):
    return a + b

def complex_multiply(a, b):
    return a * b

# تست
print("Factorial(5):", factorial(5))

z1 = complex(2, 3)
z2 = complex(1, -4)
print(f"Complex Add: {z1} + {z2} = {complex_add(z1, z2)}")
print(f"Complex Multiply: {z1} * {z2} = {complex_multiply(z1, z2)}")
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def exponentiation(base, exp):
    return base ** exp

# تست
print("Is 17 prime?", is_prime(17))
print("Is 20 prime?", is_prime(20))

print("2^5 =", exponentiation(2, 5))
print("3^4 =", exponentiation(3, 4))

import math

def square_root(n):
    return math.sqrt(n) if n >= 0 else "Invalid input"

def natural_log(n):
    return math.log(n) if n > 0 else "Invalid input"

# تست
print("Square root of 25:", square_root(25))
print("Square root of -4:", square_root(-4))
print("Natural log of 10:", natural_log(10))
print("Natural log of -5:", natural_log(-5))
import numpy as np
import matplotlib.pyplot as plt

def plot_function(func, x_range=(-10, 10), num_points=100):
    x = np.linspace(x_range[0], x_range[1], num_points)
    y = [func(val) for val in x]
    
    plt.plot(x, y, label=f"{func.__name__}(x)")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.title(f"Plot of {func.__name__}(x)")
    plt.legend()
    plt.grid(True)
    plt.show()

# تست
plot_function(np.sin)
plot_function(np.cos)
plot_function(np.exp)
import tkinter as tk

def calculate():
    try:
        result = eval(entry.get())
        label_result.config(text=f"Result: {result}")
    except Exception as e:
        label_result.config(text="Error")

# رابط گرافیکی
root = tk.Tk()
root.title("Simple Calculator")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        label_result.config(text=f"Result: {result}")
        history.append(f"{expression} = {result}")
        update_history()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])  # نمایش ۵ محاسبه اخیر
    label_history.config(text=f"History:\n{history_text}")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with History")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        history.append(f"{expression} = {result}")
        update_history()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Percentage")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        history.append(f"{expression} = {result}")
        update_history()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Percentage")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        history.append(f"{expression} = {result}")
        update_history()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Percentage")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        history.append(f"{expression} = {result}")
        update_history()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

def clear():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Clear")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear", command=clear)
btn_clear.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()
#toda not code
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

def save_to_file(record):
    with open("calculation_history.txt", "a") as file:
        file.write(record + "\n")

def clear():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with History Save")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear", command=clear)
btn_clear.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        label_result.config(text=f"Result: {result}")
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

def save_to_file(record):
    with open("calculation_history.txt", "a") as file:
        file.write(record + "\n")

def load_history():
    try:
        with open("calculation_history.txt", "r") as file:
            lines = file.readlines()
            history.extend(line.strip() for line in lines[-5:])
            update_history()
    except FileNotFoundError:
        pass

def clear():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with History Load")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear", command=clear)
btn_clear.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

load_history()
root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        if "%" in expression:
            num, percent = expression.split("%")
            result = (float(num) * float(percent)) / 100
        else:
            result = eval(expression)
        
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text = "\n".join(history[-5:])
    label_history.config(text=f"History:\n{history_text}")

def save_to_file(record):
    with open("calculation_history.txt", "a") as file:
        file.write(record + "\n")

def load_history():
    try:
        with open("calculation_history.txt", "r") as file:
            lines = file.readlines()
            history.extend(line.strip() for line in lines[-5:])
            update_history()
    except FileNotFoundError:
        pass

def undo_last():
    if history:
        history.pop()
        update_history()
        with open("calculation_history.txt", "w") as file:
            file.write("\n".join(history) + "\n")

def clear():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Undo")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear", command=clear)
btn_clear.pack(pady=5)

btn_undo = tk.Button(root, text="Undo", command=undo_last)
btn_undo.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

label_history = tk.Label(root, text="History:")
label_history.pack(pady=10)

load_history()
root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def save_to_file(record):
    with open("calculation_history.txt", "a") as file:
        file.write(record + "\n")

def load_history():
    try:
        with open("calculation_history.txt", "r") as file:
            lines = file.readlines()
            history.extend(line.strip() for line in lines)
            update_history()
    except FileNotFoundError:
        pass

def clear():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Scrollable History")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear", command=clear)
btn_clear.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

scrollbar = tk.Scrollbar(root)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

history_list = tk.Listbox(root, yscrollcommand=scrollbar.set, height=10)
history_list.pack(pady=10)

scrollbar.config(command=history_list.yview)

load_history()
root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
        label_result.config(text=f"Result: {result}")
        label_result.bind("<Button-1>", lambda e: copy_to_clipboard(result))
    except Exception:
        label_result.config(text="Error")

def copy_to_clipboard(result):
    root.clipboard_clear()
    root.clipboard_append(str(result))
    root.update()
    label_result.config(text=f"Copied: {result}")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def save_to_file(record):
    with open("calculation_history.txt", "a") as file:
        file.write(record + "\n")

def load_history():
    try:
        with open("calculation_history.txt", "r") as file:
            lines = file.readlines()
            history.extend(line.strip() for line in lines)
            update_history()
    except FileNotFoundError:
        pass

def clear():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")

# رابط گرافیکی
root = tk.Tk()
root.title("Calculator with Copy Feature")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear", command=clear)
btn_clear.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

scrollbar = tk.Scrollbar(root)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

history_list = tk.Listbox(root, yscrollcommand=scrollbar.set, height=10)
history_list.pack(pady=10)

scrollbar.config(command=history_list.yview)

load_history()
root.mainloop()
import tkinter as tk

history = []
theme = "light"

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
        label_result.config(text=f"Result: {result}")
        label_result.bind("<Button-1>", lambda e: copy_to_clipboard(result))
    except Exception:
        label_result.config(text="Error")

def copy_to_clipboard(result):
    root.clipboard_clear()
    root.clipb
import tkinter as tk
from fpdf import FPDF

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def save_to_file(record):
    with open("calculation_history.txt", "a") as file:
        file.write(record + "\n")

def export_to_pdf():
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Calculation History", ln=True, align="C")
    
    for record in history:
        pdf.cell(200, 10, txt=record, ln=True)
    
    pdf.output("calculation_history.pdf")
    label_result.config(text="PDF Exported!")

root = tk.Tk()
root.title("Calculator with PDF Export")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_export = tk.Button(root, text="Export to PDF", command=export_to_pdf)
btn_export.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

scrollbar = tk.Scrollbar(root)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

history_list = tk.Listbox(root, yscrollcommand=scrollbar.set, height=10)
history_list.pack(pady=10)

scrollbar.config(command=history_list.yview)

root.mainloop()
import tkinter as tk

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        save_to_file(record)
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def save_to_file(record):
    with open("calculation_history.txt", "a") as file:
        file.write(record + "\n")

def clear_all():
    entry.delete(0, tk.END)
    label_result.config(text="Result: ")
    history.clear()
    update_history()

root = tk.Tk()
root.title("Calculator with Clear All")

root.configure(bg="#2C2F33")

entry = tk.Entry(root, width=20, bg="#99AAB5", fg="black")
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate, bg="#7289DA", fg="white")
btn_calculate.pack(pady=5)

btn_clear = tk.Button(root, text="Clear All", command=clear_all, bg="#99AAB5", fg="black")
btn_clear.pack(pady=5)

label_result = tk.Label(root, text="Result: ", bg="#2C2F33", fg="white")
label_result.pack(pady=10)

scrollbar = tk.Scrollbar(root)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

history_list = tk.Listbox(root, yscrollcommand=scrollbar.set, height=10, bg="#23272A", fg="white")
history_list.pack(pady=10)

scrollbar.config(command=history_list.yview)

root.mainloop()
import tkinter as tk
from tkinter import filedialog

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def save_as():
    file_path = filedialog.asksave
import tkinter as tk

history = []
deleted_items = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def undo():
    if history:
        deleted_items.append(history.pop())
        update_history()
        label_result.config(text="Last action undone!")

root = tk.Tk()
root.title("Calculator with Undo")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_undo = tk.Button(root, text="Undo", command=undo)
btn_undo.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

history_list = tk.Listbox(root, height=10)
history_list.pack(pady=10)

root.mainloop()
import tkinter as tk

history = []
deleted_items = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        update_history()
        label_result.config(text=f"Result: {result}")
        deleted_items.clear()  # پاک کردن Redo history بعد از یک محاسبه جدید
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def undo():
    if history:
        deleted_items.append(history.pop())
        update_history()
        label_result.config(text="Last action undone!")

def redo():
    if deleted_items:
        history.append(deleted_items.pop())
        update_history()
        label_result.config(text="Last undone action redone!")

root = tk.Tk()
root.title("Calculator with Undo/Redo")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_undo = tk.Button(root, text="Undo", command=undo)
btn_undo.pack(pady=5)

btn_redo = tk.Button(root, text="Redo", command=redo)
btn_redo.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

history_list = tk.Listbox(root, height=10)
history_list.pack(pady=10)

root.mainloop()
import tkinter as tk

history = []
deleted_items = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        save_history()
        update_history()
        label_result.config(text=f"Result: {result}")
        deleted_items.clear()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def undo():
    if history:
        deleted_items.append(history.pop())
        save_history()
        update_history()
        label_result.config(text="Last action undone!")

def redo():
    if deleted_items:
        history.append(deleted_items.pop())
        save_history()
        update_history()
        label_result.config(text="Last undone action redone!")

def save_history():
    with open("calc_history.txt", "w") as file:
        for item in history:
            file.write(item + "\n")

def load_history():
    try:
        with open("calc_history.txt", "r") as file:
            for line in file:
                history.append(line.strip())
        update_history()
    except FileNotFoundError:
        pass

root = tk.Tk()
root.title("Calculator with Undo/Redo and Save")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_undo = tk.Button(root, text="Undo", command=undo)
btn_undo.pack(pady=5)

btn_redo = tk.Button(root, text="Redo", command=redo)
btn_redo.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

history_list = tk.Listbox(root, height=10)
history_list.pack(pady=10)

load_history()
root.mainloop()
good
import tkinter as tk

history = []
deleted_items = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        save_history()
        update_history()
        label_result.config(text=f"Result: {result}")
        deleted_items.clear()
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def undo():
    if history:
        deleted_items.append(history.pop())
        save_history()
        update_history()
        label_result.config(text="Last action undone!")

def redo():
    if deleted_items:
        history.append(deleted_items.pop())
        save_history()
        update_history()
        label_result.config(text="Last undone action redone!")

def save_history():
    with open("calc_history.txt", "w") as file:
        for item in history:
            file.write(item + "\n")

def load_history():
    try:
        with open("calc_history.txt", "r") as file:
            for line in file:
                history.append(line.strip())
        update_history()
    except FileNotFoundError:
        pass

def clear_history():
    history.clear()
    deleted_items.clear()
    save_history()
    update_history()
    label_result.config(text="History cleared!")

root = tk.Tk()
root.title("Calculator with Undo/Redo and Clear History")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_undo = tk.Button(root, text="Undo", command=undo)
btn_undo.pack(pady=5)

btn_redo = tk.Button(root, text="Redo", command=redo)
btn_redo.pack(pady=5)

btn_clear = tk.Button(root, text="Clear History", command=clear_history)
btn_clear.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

history_list = tk.Listbox(root, height=10)
history_list.pack(pady=10)

load_history()
root.mainloop()
import tkinter as tk
import math

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        record = f"{expression} = {result}"
        history.append(record)
        save_history()
        update_history()
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def scientific_operation(op):
    try:
        num = float(entry.get())
        if op == "sqrt":
            result = math.sqrt(num)
        elif op == "sin":
            result = math.sin(math.radians(num))
        elif op == "cos":
            result = math.cos(math.radians(num))
        elif op == "tan":
            result = math.tan(math.radians(num))
        elif op == "log":
            result = math.log10(num)
        entry.delete(0, tk.END)
        entry.insert(0, str(result))
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def save_history():
    with open("calc_history.txt", "w") as file:
        for item in history:
            file.write(item + "\n")

def load_history():
    try:
        with open("calc_history.txt", "r") as file:
            for line in file:
                history.append(line.strip())
        update_history()
    except FileNotFoundError:
        pass

root = tk.Tk()
root.title("Scientific Calculator")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_sqrt = tk.Button(root, text="√", command=lambda: scientific_operation("sqrt"))
btn_sqrt.pack(pady=5)

btn_sin = tk.Button(root, text="sin", command=lambda: scientific_operation("sin"))
btn_sin.pack(pady=5)

btn_cos = tk.Button(root, text="cos", command=lambda: scientific_operation("cos"))
btn_cos.pack(pady=5)

btn_tan = tk.Button(root, text="tan", command=lambda: scientific_operation("tan"))
btn_tan.pack(pady=5)

btn_log = tk.Button(root, text="log", command=lambda: scientific_operation("log"))
btn_log.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

history_list = tk.Listbox(root, height=10)
history_list.pack(pady=10)

load_history()
root.mainloop()
import tkinter as tk
import math

memory = 0
history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression)
        history.append(f"{expression} = {result}")
        save_history()
        update_history()
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def memory_operation(op):
    global memory
    try:
        num = float(entry.get())
        if op == "M+":
            memory += num
        elif op == "M-":
            memory -= num
        elif op == "MR":
            entry.delete(0, tk.END)
            entry.insert(0, str(memory))
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def save_history():
    with open("calc_history.txt", "w") as file:
        for item in history:
            file.write(item + "\n")

def load_history():
    try:
        with open("calc_history.txt", "r") as file:
            for line in file:
                history.append(line.strip())
        update_history()
    except FileNotFoundError:
        pass

root = tk.Tk()
root.title("Calculator with Memory Functions")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_m_plus = tk.Button(root, text="M+", command=lambda: memory_operation("M+"))
btn_m_plus.pack(pady=5)

btn_m_minus = tk.Button(root, text="M-", command=lambda: memory_operation("M-"))
btn_m_minus.pack(pady=5)

btn_mr = tk.Button(root, text="MR", command=lambda: memory_operation("MR"))
btn_mr.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

history_list = tk.Listbox(root, height=10)
history_list.pack(pady=10)

load_history()
root.mainloop()
import tkinter as tk
import math

memory = 0
history = []

def calculate():
    try:
        expression = entry.get().replace("%", "/100").replace("π", str(math.pi))
        result = eval(expression)
        history.append(f"{expression} = {result}")
        save_history()
        update_history()
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def insert_symbol(symbol):
    entry.insert(tk.END, symbol)

def memory_operation(op):
    global memory
    try:
        num = float(entry.get())
        if op == "M+":
            memory += num
        elif op == "M-":
            memory -= num
        elif op == "MR":
            entry.delete(0, tk.END)
            entry.insert(0, str(memory))
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_list.delete(0, tk.END)
    for item in history[-10:]:
        history_list.insert(tk.END, item)

def save_history():
    with open("calc_history.txt", "w") as file:
        for item in history:
            file.write(item + "\n")

def load_history():
    try:
        with open("calc_history.txt", "r") as file:
            for line in file:
                history.append(line.strip())
        update_history()
    except FileNotFoundError:
        pass

root = tk.Tk()
root.title("Calculator with % and π")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_percent = tk.Button(root, text="%", command=lambda: insert_symbol("%"))
btn_percent.pack(pady=5)

btn_pi = tk.Button(root, text="π", command=lambda: insert_symbol("π"))
btn_pi.pack(pady=5)

btn_m_plus = tk.Button(root, text="M+", command=lambda: memory_operation("M+"))
btn_m_plus.pack(pady=5)

btn_m_minus = tk.Button(root, text="M-", command=lambda: memory_operation("M-"))
btn_m_minus.pack(pady=5)

btn_mr = tk.Button(root, text="MR", command=lambda: memory_operation("MR"))
btn_mr.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

history_list = tk.Listbox(root, height=10)
history_list.pack(pady=10)

load_history()
root.mainloop()
import tkinter as tk
import cmath

def calculate():
    try:
        expression = entry.get()
        result = eval(expression, {"__builtins__": None}, {"j": 1j, "sqrt": cmath.sqrt})
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

root = tk.Tk()
root.title("Complex Number Calculator")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

root.mainloop()
import tkinter as tk
import math

def calculate():
    try:
        expression = entry.get()
        result = eval(expression, {"__builtins__": None}, 
                      {"sin": math.sin, "cos": math.cos, "tan": math.tan, "pi": math.pi})
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

root = tk.Tk()
root.title("Scientific Calculator")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

root.mainloop()
import tkinter as tk
import math

def calculate():
    try:
        expression = entry.get()
        result = eval(expression, {"__builtins__": None}, 
                      {"sin": math.sin, "cos": math.cos, "tan": math.tan, 
                       "pi": math.pi, "radians": math.radians, "degrees": math.degrees})
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

root = tk.Tk()
root.title("Scientific Calculator")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

root.mainloop()
import tkinter as tk
import math

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression, {"__builtins__": None}, 
                      {"sin": math.sin, "cos": math.cos, "tan": math.tan, 
                       "pi": math.pi, "radians": math.radians, "degrees": math.degrees})
        history.append(f"{expression} = {result}")
        update_history()
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text.config(state=tk.NORMAL)
    history_text.delete(1.0, tk.END)
    for line in history[-5:]:  # نمایش ۵ محاسبه آخر
        history_text.insert(tk.END, line + "\n")
    history_text.config(state=tk.DISABLED)

root = tk.Tk()
root.title("Scientific Calculator")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

history_text = tk.Text(root, height=5, width=30, state=tk.DISABLED)
history_text.pack(pady=10)

root.mainloop()
import tkinter as tk
import math

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression, {"__builtins__": None}, 
                      {"sin": math.sin, "cos": math.cos, "tan": math.tan, 
                       "pi": math.pi, "radians": math.radians, "degrees": math.degrees,
                       "log": math.log, "factorial": math.factorial})
        history.append(f"{expression} = {result}")
        update_history()
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def update_history():
    history_text.config(state=tk.NORMAL)
    history_text.delete(1.0, tk.END)
    for line in history[-5:]:  # نمایش ۵ محاسبه آخر
        history_text.insert(tk.END, line + "\n")
    history_text.config(state=tk.DISABLED)

root = tk.Tk()
root.title("Scientific Calculator")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)
f
label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

history_text = tk.Text(root, height=5, width=30, state=tk.DISABLED)
history_text.pack(pady=10)

root.mainloop()
import tkinter as tk
import math

history = []

def calculate():
    try:
        expression = entry.get()
        result = eval(expression, {"__builtins__": None}, 
                      {"sin": math.sin, "cos": math.cos, "tan": math.tan, 
                       "pi": math.pi, "radians": math.radians, "degrees": math.degrees,
                       "log": math.log, "factorial": math.factorial, "sqrt": math.sqrt,
                       "pow": math.pow})
        history.append(f"{expression} = {result}")
        update_history()
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def insert_text(value):
    entry.insert(tk.END, value)

def update_history():
    history_text.config(state=tk.NORMAL)
    history_text.delete(1.0, tk.END)
    for line in history[-5:]:
        history_text.insert(tk.END, line + "\n")
    history_text.config(state=tk.DISABLED)

root = tk.Tk()
root.title("Scientific Calculator")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

btn_sqrt = tk.Button(root, text="√", command=lambda: insert_text("sqrt("))
btn_sqrt.pack(side=tk.LEFT, padx=5)

btn_pow = tk.Button(root, text="^", command=lambda: insert_text("pow("))
btn_pow.pack(side=tk.LEFT, padx=5)

btn_fact = tk.Button(root, text="!", command=lambda: insert_text("factorial("))
btn_fact.pack(side=tk.LEFT, padx=5)

history_text = tk.Text(root, height=5, width=30, state=tk.DISABLED)
history_text.pack(pady=10)

root.mainloop()
import tkinter as tk
import math

history = []
dark_mode = False

def toggle_theme():
    global dark_mode
    dark_mode = not dark_mode
    bg_color = "#333" if dark_mode else "#fff"
    fg_color = "#fff" if dark_mode else "#000"
    
    root.config(bg=bg_color)
    entry.config(bg=bg_color, fg=fg_color, insertbackground=fg_color)
    label_result.config(bg=bg_color, fg=fg_color)
    history_text.config(bg=bg_color, fg=fg_color)
    
    for btn in buttons:
        btn.config(bg=bg_color, fg=fg_color)

def calculate():
    try:
        expression = entry.get()
        result = eval(expression, {"__builtins__": None}, 
                      {"sin": math.sin, "cos": math.cos, "tan": math.tan, 
                       "pi": math.pi, "radians": math.radians, "degrees": math.degrees,
                       "log": math.log, "factorial": math.factorial, "sqrt": math.sqrt,
                       "pow": math.pow})
        history.append(f"{expression} = {result}")
        update_history()
        label_result.config(text=f"Result: {result}")
    except Exception:
        label_result.config(text="Error")

def insert_text(value):
    entry.insert(tk.END, value)

def update_history():
    history_text.config(state=tk.NORMAL)
    history_text.delete(1.0, tk.END)
    for line in history[-5:]:
        history_text.insert(tk.END, line + "\n")
    history_text.config(state=tk.DISABLED)

root = tk.Tk()
root.title("Scientific Calculator")

entry = tk.Entry(root, width=20)
entry.pack(pady=10)

btn_calculate = tk.Button(root, text="Calculate", command=calculate)
btn_calculate.pack(pady=5)

btn_theme = tk.Button(root, text="Dark Mode", command=toggle_theme)
btn_theme.pack(pady=5)

label_result = tk.Label(root, text="Result: ")
label_result.pack(pady=10)

buttons = [
    tk.Button(root, text="√", command=lambda: insert_text("sqrt(")),
    tk.Button(root, text="^", command=lambda: insert_text("pow(")),
    tk.Button(root, text="!", command=lambda: insert_text("factorial("))
]

for btn in buttons:
    btn.pack(side=tk.LEFT, padx=5)

history_text = tk.Text(root, height=5, width=30, state=tk.DISABLED)
history_text.pack(pady=10)

root.mainloop()
import numpy as np

def matrix_operations():
    print("Choose an operation:")
    print("1. Matrix Addition")
    print("2. Matrix Multiplication")
    print("3. Matrix Transpose")
    choice = input("Enter your choice: ")

    rows = int(input("Enter number of rows: "))
    cols = int(input("Enter number of columns: "))

    print("Enter elements for first matrix:")
    matrix1 = np.array([[int(input()) for _ in range(cols)] for _ in range(rows)])

    if choice in ["1", "2"]:
        print("Enter elements for second matrix:")
        matrix2 = np.array([[int(input()) for _ in range(cols)] for _ in range(rows)])

    if choice == "1":
        result = matrix1 + matrix2
    elif choice == "2":
        result = np.dot(matrix1, matrix2)
    elif choice == "3":
        result = matrix1.T
    else:
        print("Invalid choice")
        return

    print("Result:\n", result)

# تست
matrix_operations()
import numpy as np
import matplotlib.pyplot as plt

def plot_function(expression, x_min=-10, x_max=10):
    x_values = np.linspace(x_min, x_max, 400)
    y_values = [eval(expression, {"x": x}) for x in x_values]

    plt.plot(x_values, y_values, label=f"y = {expression}")
    plt.xlabel("X-axis")
    plt.ylabel("Y-axis")
    plt.title("Function Plot")
    plt.legend()
    plt.grid(True)
    plt.show()

# تست
expression = input("Enter a function of x (e.g., x**2 + 2*x - 3): ")
plot_function(expression)
import sympy as sp

def solve_equation(equation):
    x = sp.Symbol('x')
    solutions = sp.solve(equation, x)
    return solutions

# تست
equation = input("Enter an equation (e.g., x**2 - 4*x + 3): ")
solutions = solve_equation(equation)
print("Roots:", solutions)
import sympy as sp

def differentiate_and_integrate(expression):
    x = sp.Symbol('x')
    expr = sp.sympify(expression)

    derivative = sp.diff(expr, x)
    integral = sp.integrate(expr, x)

    return derivative, integral

# تست
expression = input("Enter a function of x (e.g., x**3 + 2*x - 5): ")
derivative, integral = differentiate_and_integrate(expression)

print(f"Derivative: {derivative}")
print(f"Integral: {integral} + C")
import sympy as sp

def solve_linear_system(equations, variables):
    eqs = [sp.sympify(eq) for eq in equations]
    vars = [sp.Symbol(var) for var in variables]
    
    solutions = sp.solve(eqs, vars)
    return solutions

# تست
num_eqs = int(input("Enter number of equations: "))
equations = [input(f"Equation {i+1}: ") for i in range(num_eqs)]

num_vars = int(input("Enter number of variables: "))
variables = [input(f"Variable {i+1}: ") for i in range(num_vars)]

solutions = solve_linear_system(equations, variables)
print("Solutions:", solutions)
